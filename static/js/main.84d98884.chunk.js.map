{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","breeds","fileInput","React","useRef","a","current","click","event","document","getElementById","innerHTML","tf","model","reader","FileReader","image","onload","src","target","result","inputTensor","fromPixels","resized","resizeBilinear","toFloat","offset","normalized","div","batched","expandDims","predict","outputTensor","data","prediction","guess","Array","from","map","p","i","probability","breed","sort","b","slice","confidence","Math","round","word","readAsDataURL","files","className","type","ref","onChange","id","onClick","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.84d98884.chunk.js","sourcesContent":["import React from 'react';\nimport * as tf from '@tensorflow/tfjs';\nimport './App.css';\n\nfunction App() {\n\n  const breeds = ['affenpinscher', 'african', 'airedale', 'akita', 'appenzeller', 'australian-shepherd', 'basenji', 'beagle', 'bluetick', 'borzoi', 'bouvier', 'boxer', 'brabancon', 'briard', 'buhund-norwegian', 'bulldog-boston', 'bulldog-english', 'bulldog-french', 'bullterrier-staffordshire', 'cairn', 'cattledog-australian', 'chihuahua', 'chow', 'clumber', 'cockapoo', 'collie', 'collie-border', 'coonhound', 'corgi', 'corgi-cardigan', 'cotondetulear', 'dachshund', 'dalmatian', 'dane-great', 'deerhound-scottish', 'dhole', 'dingo', 'doberman', 'elkhound-norwegian', 'entlebucher', 'eskimo', 'finnish-lapphund', 'frise-bichon', 'germanshepherd', 'greyhound', 'greyhound-italian', 'groenendael', 'havanese', 'hound-afghan', 'hound-basset', 'hound-blood', 'hound-english', 'hound-ibizan', 'hound-plott', 'hound-walker', 'husky', 'keeshond', 'kelpie', 'komondor', 'kuvasz', 'labrador', 'leonberg', 'lhasa', 'malamute', 'malinois', 'maltese', 'mastiff-bull', 'mastiff-english', 'mastiff-tibetan', 'mexicanhairless', 'mix', 'mountain-bernese', 'mountain-swiss', 'newfoundland', 'otterhound', 'ovcharka-caucasian', 'papillon', 'pekinese', 'pembroke', 'pinscher-miniature', 'pitbull', 'pointer-german', 'pointer-germanlonghair', 'pomeranian', 'poodle-miniature', 'poodle-standard', 'poodle-toy', 'pug', 'puggle', 'pyrenees', 'redbone', 'retriever-chesapeake', 'retriever-curly', 'retriever-flatcoated', 'retriever-golden', 'ridgeback-rhodesian', 'rottweiler', 'saluki', 'samoyed', 'schipperke', 'schnauzer', 'schnauzer-giant', 'schnauzer-miniature', 'setter-english', 'setter-gordon', 'setter-irish', 'sheepdog-english', 'sheepdog-shetland', 'shiba', 'shihtzu', 'spaniel-blenheim', 'spaniel-brittany', 'spaniel-cocker', 'spaniel-irish', 'spaniel-japanese', 'spaniel-sussex', 'spaniel-welsh', 'springer-english', 'stbernard', 'terrier-american', 'terrier-australian', 'terrier-bedlington', 'terrier-border', 'terrier-dandie', 'terrier-fox', 'terrier-irish', 'terrier-kerryblue', 'terrier-lakeland', 'terrier-norfolk', 'terrier-norwich', 'terrier-patterdale', 'terrier-russell', 'terrier-scottish', 'terrier-sealyham', 'terrier-silky', 'terrier-tibetan', 'terrier-toy', 'terrier-westhighland', 'terrier-wheaten', 'terrier-yorkshire', 'vizsla', 'waterdog-spanish', 'weimaraner', 'whippet', 'wolfhound-irish']\n  const fileInput = React.useRef<HTMLInputElement>();\n\n  async function handleClick() {\n    fileInput.current.click()\n  }\n\n  async function handleChange(event: any) {\n\n    document.getElementById('result').innerHTML = \"Ummmm.....\";\n\n    const model = await tf.loadGraphModel('model/1/model.json');\n    const reader = new FileReader();\n    const image = document.getElementById(\"img\") as HTMLImageElement;\n\n    reader.onload = async (event) => {\n      image.src = event.target.result as string;\n\n      image.onload = async () => {\n\n        const inputTensor = tf.browser.fromPixels(image);\n        const resized = tf.image.resizeBilinear(inputTensor, [224, 224]).toFloat();\n        const offset = tf.scalar(255.0);\n        const normalized = resized.div(offset);\n        const batched = normalized.expandDims(0);\n\n        const outputTensor = await model.predict(batched) as tf.Tensor;\n\n        const prediction = await outputTensor.data();\n\n        let guess = Array.from(prediction).map(function(p, i) {\n          return {\n            probability: p,\n            breed: breeds[i - 1]\n          };\n        }).sort(function(a,b){\n          return b.probability-a.probability;\n        }).slice(0,1)[0];\n\n        const confidence = Math.round(guess.probability * 100);\n\n        let word;\n\n        if (confidence >= 90) {\n          word = 'quite'\n        } else if (confidence >= 80) {\n          word = 'pretty'\n        } else if (confidence >= 60) {\n          word = 'kinda'\n        } else if (confidence >= 40) {\n          word = 'vaguely'\n        } else {\n          word = ''\n        }\n\n        document.getElementById('result').innerHTML = `So I'm ${word} sure that is a ${guess.breed}`\n      }\n    };\n\n    reader.readAsDataURL(event.target.files[0]);\n  }\n\n  return (\n    <div>\n      <div className=\"main\">\n        <div className=\"controls\">\n          <input type='file' ref={fileInput} onChange={handleChange} />\n          <button id='upload' onClick={handleClick} >Choose a dog image</button>\n          <div id=\"result\"></div>\n        </div>\n        <img id=\"img\"/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}