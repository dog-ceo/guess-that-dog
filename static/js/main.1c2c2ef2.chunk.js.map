{"version":3,"sources":["lib/breeds.ts","App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["breeds","App","useState","model","setModel","imgSrc","setImgSrc","message","setMessage","fileInput","React","createRef","event","a","image","target","inputTensor","tf","fromPixels","resized","resizeBilinear","toFloat","offset","normalized","div","batched","expandDims","predict","outputTensor","data","prediction","guesses","Array","from","map","probability","index","breed","sort","b","bestGuess","nextBestGuess","confidence","useEffect","id","style","backgroundImage","className","type","ref","onChange","reader","FileReader","onload","result","files","length","readAsDataURL","accept","onClick","current","click","alt","src","onLoad","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"+WAoJeA,EApJA,CACb,gBACA,UACA,WACA,QACA,cACA,sBACA,UACA,SACA,WACA,SACA,UACA,QACA,YACA,SACA,mBACA,iBACA,kBACA,iBACA,UACA,QACA,uBACA,YACA,OACA,UACA,WACA,SACA,gBACA,YACA,QACA,iBACA,gBACA,YACA,YACA,aACA,qBACA,QACA,QACA,WACA,qBACA,cACA,SACA,mBACA,eACA,kBACA,YACA,oBACA,cACA,WACA,eACA,eACA,cACA,gBACA,eACA,cACA,eACA,QACA,WACA,SACA,WACA,SACA,WACA,WACA,QACA,WACA,WACA,UACA,eACA,kBACA,kBACA,mBACA,cACA,uBACA,qBACA,eACA,aACA,qBACA,WACA,WACA,WACA,qBACA,UACA,iBACA,0BACA,aACA,mBACA,SACA,aACA,MACA,SACA,WACA,UACA,uBACA,kBACA,uBACA,mBACA,sBACA,aACA,SACA,UACA,aACA,YACA,kBACA,sBACA,iBACA,gBACA,eACA,mBACA,oBACA,QACA,UACA,mBACA,mBACA,iBACA,gBACA,mBACA,iBACA,gBACA,mBACA,gBACA,mBACA,qBACA,qBACA,iBACA,iBACA,cACA,gBACA,oBACA,mBACA,kBACA,kBACA,qBACA,kBACA,mBACA,mBACA,gBACA,kBACA,cACA,uBACA,kBACA,oBACA,SACA,mBACA,aACA,UACA,mB,OClDaC,MAzFf,WAAgB,IAAD,EACaC,qBADb,mBACNC,EADM,KACCC,EADD,OAEeF,mBAAS,IAFxB,mBAENG,EAFM,KAEEC,EAFF,OAGiBJ,mBAAS,IAH1B,mBAGNK,EAHM,KAGGC,EAHH,KAIPC,EAAYC,IAAMC,YAJX,4CA8Bb,WAA0BC,GAA1B,uCAAAC,EAAA,6DACQC,EAAQF,EAAMG,OACdC,EAAcC,IAAWC,WAAWJ,GACpCK,EAAUF,IAASG,eAAeJ,EAAa,CAAC,IAAK,MAAMK,UAC3DC,EAASL,IAAU,KACnBM,EAAaJ,EAAQK,IAAIF,GACzBG,EAAUF,EAAWG,WAAW,GANxC,SAQ6BvB,EAAOwB,QAAQF,GAR5C,cAQQG,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","file":"static/js/main.1c2c2ef2.chunk.js","sourcesContent":["const breeds = [\n  'affenpinscher',\n  'african',\n  'airedale',\n  'akita',\n  'appenzeller',\n  'australian shepherd',\n  'basenji',\n  'beagle',\n  'bluetick',\n  'borzoi',\n  'bouvier',\n  'boxer',\n  'brabancon',\n  'briard',\n  'norwegian buhund',\n  'boston bulldog',\n  'english bulldog',\n  'french bulldog',\n  'staffie',\n  'cairn',\n  'australian cattledog',\n  'chihuahua',\n  'chow',\n  'clumber',\n  'cockapoo',\n  'collie',\n  'border collie',\n  'coonhound',\n  'corgi',\n  'cardigan corgi',\n  'cotondetulear',\n  'dachshund',\n  'dalmatian',\n  'great dane',\n  'scottish deerhound',\n  'dhole',\n  'dingo',\n  'doberman',\n  'norwegian elkhound',\n  'entlebucher',\n  'eskimo',\n  'finnish lapphund',\n  'frise bichon',\n  'german shepherd',\n  'greyhound',\n  'italian greyhound',\n  'groenendael',\n  'havanese',\n  'afghan hound',\n  'basset hound',\n  'blood hound',\n  'english hound',\n  'ibizan hound',\n  'plott hound',\n  'walker hound',\n  'husky',\n  'keeshond',\n  'kelpie',\n  'komondor',\n  'kuvasz',\n  'labrador',\n  'leonberg',\n  'lhasa',\n  'malamute',\n  'malinois',\n  'maltese',\n  'bull mastiff',\n  'english mastiff',\n  'mtibetan astiff',\n  'mexican hairless',\n  'mixed breed',\n  'bernese mountain dog',\n  'swiss mountain dog',\n  'newfoundland',\n  'otterhound',\n  'caucasian ovcharka',\n  'papillon',\n  'pekinese',\n  'pembroke',\n  'miniature pinscher',\n  'pitbull',\n  'german pointer',\n  'longhair german pointer',\n  'pomeranian',\n  'miniature poodle',\n  'poodle',\n  'toy poodle',\n  'pug',\n  'puggle',\n  'pyrenees',\n  'redbone',\n  'chesapeake retriever',\n  'curly retriever',\n  'flatcoated retriever',\n  'golden retriever',\n  'rhodesian ridgeback',\n  'rottweiler',\n  'saluki',\n  'samoyed',\n  'schipperke',\n  'schnauzer',\n  'giant schnauzer',\n  'miniature schnauzer',\n  'english setter',\n  'gordon setter',\n  'irish setter',\n  'english sheepdog',\n  'shetland sheepdog',\n  'shiba',\n  'shihtzu',\n  'blenheim spaniel',\n  'brittany spaniel',\n  'cocker spaniel',\n  'irish spaniel',\n  'japanese spaniel',\n  'sussex spaniel',\n  'welsh spaniel',\n  'english springer',\n  'saint bernard',\n  'american terrier',\n  'australian terrier',\n  'bedlington terrier',\n  'border terrier',\n  'dandie terrier',\n  'fox terrier',\n  'irish terrier',\n  'kerryblue terrier',\n  'lakeland terrier',\n  'norfolk terrier',\n  'norwich terrier',\n  'patterdale terrier',\n  'russell terrier',\n  'scottish terrier',\n  'sealyham terrier',\n  'silky terrier',\n  'tibetan terrier',\n  'toy terrier',\n  'westhighland terrier',\n  'wheaten terrier',\n  'yorkshire terrier',\n  'vizsla',\n  'spanish waterdog',\n  'weimaraner',\n  'whippet',\n  'irish wolfhound'\n];\n\nexport default breeds;\n","import React, { ChangeEvent, useEffect, useState } from 'react';\nimport * as tf from '@tensorflow/tfjs';\nimport { GraphModel } from '@tensorflow/tfjs';\nimport breeds from './lib/breeds';\nimport './App.css';\n\nfunction App() {\n  const [model, setModel] = useState<GraphModel>();\n  const [imgSrc, setImgSrc] = useState('');\n  const [message, setMessage] = useState('');\n  const fileInput = React.createRef<HTMLInputElement>();\n\n  useEffect(() => {\n    (async () => {\n      setModel(await tf.loadGraphModel('model/1/model.json'));\n    })();\n  }, []);\n\n  function handleClick() {\n    fileInput.current!.click();\n  }\n\n  function handleChange(event: ChangeEvent<HTMLInputElement>) {\n    setMessage('Ummmm.....');\n\n    const reader = new FileReader();\n\n    reader.onload = (event) => {\n      setImgSrc(event.target!.result as string);\n    };\n\n    if (event.target.files && event.target.files.length > 0) {\n      reader.readAsDataURL(event.target.files[0]);\n    }\n  }\n\n  async function handleLoad(event: ChangeEvent<HTMLImageElement>) {\n    const image = event.target;\n    const inputTensor = tf.browser.fromPixels(image);\n    const resized = tf.image.resizeBilinear(inputTensor, [224, 224]).toFloat();\n    const offset = tf.scalar(255.0);\n    const normalized = resized.div(offset);\n    const batched = normalized.expandDims(0);\n\n    const outputTensor = await model!.predict(batched) as tf.Tensor;\n    const prediction = await outputTensor.data();\n\n    const guesses = Array.from(prediction).map((probability, index) => ({\n      probability,\n      breed: breeds[index - 1]\n    })).sort((a,b) => b.probability - a.probability);\n\n    const bestGuess = guesses[0];\n    const nextBestGuess = guesses[1];\n    const confidence = bestGuess.probability;\n\n    let confidenceWord;\n\n    if (confidence >= 0.9) {\n      confidenceWord = 'pretty'\n    } else if (confidence >= 0.8) {\n      confidenceWord = 'quite'\n    } else if (confidence >= 0.6) {\n      confidenceWord = 'kinda'\n    } else if (confidence >= 0.4) {\n      confidenceWord = 'vaguely'\n    } else if (confidence >= 0.2) {\n      confidenceWord = 'only slightly'\n    } else {\n      confidenceWord = 'only a little bit'\n    }\n\n    let message = `So I'm ${confidenceWord} sure that is a ${bestGuess.breed}`;\n\n    if (confidence < 0.5) {\n      message = `${message} or maybe a ${nextBestGuess.breed}`;\n    }\n\n    setMessage(`${message} ?`);\n  }\n\n  return (\n    <div>\n      <div id=\"main\" style={{ backgroundImage: `url(${imgSrc})` }}>\n        <div className=\"controls\">\n          <input type='file' ref={fileInput} onChange={handleChange} accept=\"image/*\" />\n          <button id='upload' onClick={handleClick} >Submit a dog image</button>\n          <div id=\"result\">{message}</div>\n        </div>\n        <img alt=\"dog\" id=\"img\" src={imgSrc} onLoad={handleLoad} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}